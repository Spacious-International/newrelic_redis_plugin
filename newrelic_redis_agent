#! /usr/bin/env ruby
# frozen_string_literal: true

require "rubygems"
require "bundler/setup"

require "dante"
require "newrelic_plugin"
require "redis"

pid_path = File.expand_path("../run/newrelic_redis_agent.pid", __FILE__)
log_path = File.expand_path("../log/newrelic_redis_agent.log", __FILE__)

runner = Dante::Runner.new('newrelic_redis_agent', :pid_path  => pid_path, :log_path => log_path)
runner.description = 'New Relic plugin agent for Redis'
runner.with_options do |opts|
  opts.on('-c', '--config FILE', String, 'Specify configuration file') do |config|
    options[:config_path] = config
  end
end

runner.execute do |opts|
  $redisplugin_config_path = opts[:config_path]

  module RedisAgent

    class Agent < NewRelic::Plugin::Agent::Base

      agent_guid "hk.spacious.newrelic_redis_plugin"
      agent_version "0.1.0"
      agent_config_options :instance_name, :url, :database
      agent_human_labels('Redis') do
        if instance_name == nil
          host = Socket.gethostname.sub(/\..*/, '')
          uri = URI.parse("#{url}")
          "#{host}:#{uri.port}"
        else
          "#{instance_name}"
        end
      end


      def setup_metrics
        @redis = Redis.new(:url => url)
        @last_values = {}
        @redis_info = nil
        @last_metric_report_time = ::Time.now
      end

      def poll_cycle
        begin
          @redis_info = @redis.info
          info = @redis_info
        rescue => e
          $stderr.puts(e.message)
          return nil
        end
        report_metric "Memory/Used", "bytes", info['used_memory'].to_i
        report_metric "Memory/RSS", "bytes", info['used_memory_rss'].to_i
        report_metric "Memory/Lua", "bytes", info['used_memory_lua'].to_i
        report_metric "Memory/Peak", "bytes", info['used_memory_peak'].to_i
        report_metric "Memory/Memory Fragmentation Ratio", "", info['mem_fragmentation_ratio'].to_f

        report_metric "CPU/System", "seconds", info['used_cpu_sys'].to_i
        report_metric "CPU/User", "seconds", info['used_cpu_sys'].to_i
        report_metric "CPU/Child System", "seconds", info['used_cpu_sys_children'].to_i
        report_metric "CPU/Child User", "seconds", info['used_cpu_sys_children'].to_i

        report_metric "Persistence/RDB Unsaved Changes", "changes", info['rdb_changes_since_last_save'].to_i
        report_metric "Persistence/RDB Save Time", "seconds", info['rdb_last_bgsave_time_sec'].to_i

        report_metric "Connection/Clients", "connections", info['connected_clients'].to_i
        report_metric "Connection/Slaves", "connections", info['connected_slaves'].to_i
        report_metric "Connection/Blocked Clients", "connections", info['blocked_clients'].to_i

        report_metric "ConnectionRate/Received", "connections", last_metric('total_connections_received').to_i
        report_metric "ConnectionRate/Rejected", "connections", last_metric('rejected_connections').to_i

        report_metric "Stats/Last Fork Duration", "microseconds", info['latest_fork_usec'].to_i
        report_metric "Stats/Commands Processed", "commands", last_metric('total_commands_processed').to_i

        report_metric "KeyspaceRate/Hits", "keys", last_metric('keyspace_hits')
        report_metric "KeyspaceRate/Misses", "keys", last_metric('keyspace_misses')
        report_metric "Key Removal Rate/Expired Keys", "keys", last_metric('expired_keys')
        report_metric "Key Removal Rate/Evicted Keys", "keys", last_metric('evicted_keys')

        report_latency_event_metrics_since_last_report
        report_slowlog_entries_metrics_since_last_report

        dbstat = nil
        dbstat = info[database] if database
        if dbstat
          begin
            h = Hash[dbstat.split(/,/).each.collect{|s|s.split('=')}]
            report_metric "Database/Total Keys", "keys", h['keys'].to_i
            report_metric "Database/Expiring Keys", "keys", h['expires'].to_i
          rescue => e
            $stderr.puts(e.message)
          end
        end

      ensure
        @last_metric_report_time = ::Time.now
        @redis_info = nil
      end

      private

      def last_metric(key)
        return nil if @redis_info.nil? || @redis_info[key].nil?

        current_value = @redis_info[key].to_i
        if @last_values[key].nil?
          metric = 0
        else
          metric = current_value - @last_values[key]
          metric = 0 if metric < 0
        end
        @last_values[key] = current_value
        return metric
      end

      def report_latency_event_metrics_since_last_report
        LATENCY_EVENT_NAMES.each do |latency_event_name|
          prefix = "Latency/Events/#{latency_event_name}"

          average_val_metric_name =
            "#{prefix}/Average Latency Since Last Report"
          maximum_val_metric_name =
            "#{prefix}/Maximum Latency Since Last Report"
          total_entry_count_metric_name =
            "#{prefix}/Total Entries Since Last Report"

          begin
            result = @redis.client.call(
              "latency history #{latency_event_name}".split(" ")
            )
          rescue => e
            $stderr.puts(e.message)
            next
          end

          if result.empty?
            report_metric(
              average_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              maximum_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              total_entry_count_metric_name,
              "entry",
              -1,
            )
            next
          end

          latency_events = result.map do |event_in_array|
            next unless event_in_array.length == 2

            LatencyHistoryEvent.new(
              latency_event_name,
              event_in_array[0],
              event_in_array[1],
            )
          end.compact
          latency_events_since_last_report = latency_events.select do |event|
            event.unix_timestamp >= @last_metric_report_time.to_i
          end

          # Avoid divide by zero
          if latency_events_since_last_report.empty?
            report_metric(
              average_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              maximum_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              total_entry_count_metric_name,
              "entry",
              -1,
            )
            next
          end

          avg_val = latency_events_since_last_report.
            map(&:latency_millisecond).inject(0, :+) /
            latency_events_since_last_report.size
          report_metric(
            average_val_metric_name,
            "millisecond",
            avg_val,
          )

          max_val = latency_events_since_last_report.
            map(&:latency_millisecond).max
          report_metric(
            maximum_val_metric_name,
            "millisecond",
            max_val,
          )

          report_metric(
            total_entry_count_metric_name,
            "entry",
            latency_events_since_last_report.size,
          )
        end
      end

      def report_slowlog_entries_metrics_since_last_report
        entry_count = nil
        begin
          entry_count = @redis.client.call(
            "SLOWLOG LEN".split(" ")
          )
        rescue => e
          $stderr.puts(e.message)
          return
        end

        report_metric(
          "Latency/Slow Log/Total Entries",
          "entry",
          entry_count,
        )

        result = nil
        begin
          result = @redis.client.call(
            "SLOWLOG GET #{entry_count}".split(" ")
          )
        rescue => e
          $stderr.puts(e.message)
        end

        entries = []
        if result
          entries = result.map do |entry|
            SlowLogHistoryEntry.new(
              entry[0],
              entry[1],
              entry[2],
              entry[3],
            )
          end
        end

        entries_since_last_report = entries.select do |entry|
          entry.unix_timestamp >= @last_metric_report_time.to_i
        end

        entries_since_last_report_per_command_name =
          entries_since_last_report.group_by do |entry|
            entry.command_arguments.first
          end

        entries_since_last_report_per_command_name.
          each_pair do |command_name, entries_for_command_since_last_report|

          prefix = "Latency/Slow Log/#{command_name.upcase}"

          average_val_metric_name =
            "#{prefix}/Average Latency Since Last Report"
          maximum_val_metric_name =
            "#{prefix}/Maximum Latency Since Last Report"
          total_entry_count_metric_name =
            "#{prefix}/Total Entries Since Last Report"

          # Avoid divide by zero
          if entries_for_command_since_last_report.empty?
            report_metric(
              average_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              average_val_metric_name,
              "microsecond",
              -1,
            )

            report_metric(
              maximum_val_metric_name,
              "millisecond",
              -1,
            )
            report_metric(
              maximum_val_metric_name,
              "microsecond",
              -1,
            )

            report_metric(
              total_entry_count_metric_name,
              "entry",
              -1,
            )

            next
          end

          avg_val =
            entries_for_command_since_last_report.
              map(&:latency_microseconds).inject(0, :+) /
              entries_for_command_since_last_report.size
          report_metric(
            average_val_metric_name,
            "millisecond",
            avg_val / 1000,
          )
          report_metric(
            average_val_metric_name,
            "microsecond",
            avg_val,
          )

          max_val =
            entries_for_command_since_last_report.
              map(&:latency_microseconds).max
          report_metric(
            maximum_val_metric_name,
            "millisecond",
            max_val / 1000,
          )
          report_metric(
            maximum_val_metric_name,
            "microsecond",
            max_val,
          )

          report_metric(
            total_entry_count_metric_name,
            "entry",
            entries_for_command_since_last_report.size,
          )
        end
      end


      LATENCY_EVENT_NAMES = [
        "fork",

        "command",
        "fast-command",

        "expire-cycle",
        "eviction-del",
        "eviction-cycle",

        "rdb-unlik-temp-file",

        "aof-write-pending-fsync",
        "aof-write-active-child",
        "aof-write-alone",
        "aof-fsync-always",
        "aof-fstat",
        "aof-rewrite-diff-write",
        "aof-rename",
      ].map(&:freeze).freeze


      LatencyHistoryEvent = Struct.new(
        :event_name,
        :unix_timestamp,
        :latency_millisecond,
      )
      SlowLogHistoryEntry = Struct.new(
        :unique_progressive_identifier,
        :unix_timestamp,
        :latency_microseconds,
        :command_arguments,
      )

    end

    if $redisplugin_config_path
      NewRelic::Plugin::Config.config_file = $redisplugin_config_path
    end
    NewRelic::Plugin::Setup.install_agent :redis, RedisAgent
    NewRelic::Plugin::Run.setup_and_run

  end

end
